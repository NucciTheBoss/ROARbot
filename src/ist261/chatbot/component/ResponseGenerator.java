package ist261.chatbot.component;

import ist261.chatbot.infra.Chatbot;
import ist261.user.intent.AbstractUserIntent;
import java.util.Random;

// Import file class to write pbs script for user
import java.io.FileWriter;
import java.io.IOException;
import java.io.File;

public class ResponseGenerator {

	private Chatbot chatbot;
	
	public ResponseGenerator(Chatbot chatbot) {
		this.chatbot = chatbot;
	}

	public String getResponse(AbstractUserIntent nowUserIntent, String nowConversationalAction) {
		Random randomInt = new Random();
		if(nowUserIntent!=null&&nowUserIntent.getIntentName().equals("UseCommand")) {
			String nowCommand = (String)nowUserIntent.getLastestSlotValue("command");
			if(nowConversationalAction.equals("ask-command")){
				int askCommandResponse = randomInt.nextInt(3);
				switch (askCommandResponse) {
					case 0:
						return "Sure, I can help you figure out how to use a " +
								"command. Just tell me which command you are trying " +
								"to use!";

					case 1:
						return "Could you please tell me what command you are " +
								"trying to use?";

					case 2:
						return "What command are you trying to use?";
				}

			}else if(nowConversationalAction.equals("answer-command")){
				return "Here is your answer";
			}else{
				return "I'm sorry, but I don't understand what you just said. " +
						"Try asking me something like \"How to use the 'cat' command!\"";
			}

		}else if(nowUserIntent!=null&&nowUserIntent.getIntentName().equals("WritePBS")){
			// Pull all the slot values from the slot table
			String shell = (String) nowUserIntent.getLastestSlotValue("shell");
			String allocName = (String) nowUserIntent.getLastestSlotValue("alloc");
			String nodeAmount = (String) nowUserIntent.getLastestSlotValue("node");
			String ppnAmount = (String) nowUserIntent.getLastestSlotValue("ppn");
			String pmemAmount = (String) nowUserIntent.getLastestSlotValue("pmem");
			String wallTime = (String) nowUserIntent.getLastestSlotValue("walltime");
			String emailYesNo = (String) nowUserIntent.getLastestSlotValue("email_yes_no");
			String email = (String) nowUserIntent.getLastestSlotValue("email");

			if (nowConversationalAction.equals("finish-script")) {
				// Write to pbs script
				try {
					File newFile = new File("/home/nucci/work/roarbot_script.pbs");
					newFile.createNewFile();
					FileWriter pbsWriter = new FileWriter("/home/nucci/work/roarbot_script.pbs");
					pbsWriter.write("#!/bin/"+shell+"\n");
					pbsWriter.write("#PBS -A "+allocName+"\n");
					pbsWriter.write("#PBS -l nodes="+nodeAmount+":ppn="+ppnAmount+"\n");
					pbsWriter.write("#PBS -l pmem="+pmemAmount+"\n");
					pbsWriter.write("#PBS -l walltime="+wallTime+"\n");
					pbsWriter.write("#PBS -j oe\n");

					if (emailYesNo.equals("yes")){
						pbsWriter.write("#PBS -m bea\n");
						pbsWriter.write("#PBS -M "+email+"\n");
					}

					pbsWriter.write("\n#------ ^Autogenerated by ROARbot^ ------#");
					pbsWriter.close();

				} catch (IOException e) {
					System.out.println("Something went wrong writing to pbs file");
					e.printStackTrace();
				}

				return "Alright, I saved your PBS script to ~/work/roarbot_script.pbs! " +
						"You can open it and add your script to it now! If you need " +
						"anything else, let me know!";

			} else if (nowConversationalAction.equals("ask-email")) {
				return "Awesome! I just need your email";

			} else if (nowConversationalAction.equals("ask-if-email")) {
				return "Would you like to receive and email if your job either " +
						"(b) begins, (e) ends, or (a) aborts? Please enter your " +
						"response as either yes or no";

			} else if (nowConversationalAction.equals("ask-walltime")) {
				return "How long do you think your job needs to run? Please " +
						"enter your response in the following format: " +
						"HH:MM:SS";

			} else if (nowConversationalAction.equals("ask-pmem")) {
				return "How much memory per processor do you think you need? " +
						"1gb, 2gb, 5gb, ...?";

			} else if (nowConversationalAction.equals("ask-ppn")) {
				return "How many processors do you need for your job? " +
						"1, 2, 3, ...?";

			} else if (nowConversationalAction.equals("ask-node")) {
				return "How many nodes do you need for your job? " +
						"1, 2, 3, ...?";

			} else if (nowConversationalAction.equals("ask-alloc")) {
				return "What allocation are we submitting your job to?";

			} else if (nowConversationalAction.equals("ask-shell")) {
				return "What scripting language language would you like to " +
						"use for your pbs script? You can use one of the following:\n" +
						"    1. bash\n" +
						"    2. csh";
			} else {
				return "I'm sorry, but I don't think I can understand what you just " +
						"said. Try asking me \"I need help writing a pbs script!\"";
			}

		}else if(nowUserIntent!=null&&nowUserIntent.getIntentName().equals("TroubleShoot")){

		}else{
			int otherResponse = randomInt.nextInt(3);
			switch (otherResponse) {
				case 0:
					return "I wasn't programmed to be a social bot :( " +
							"but you can ask me for help if you're writing a pbs script " +
							"Try asking me, \"Write a pbs script!\"";

				case 1:
					return "I'm sorry Dave. I can't do that. But what I can do is " +
							"teach you how to use common Linux commands. Try asking " +
							"me \"How to use the 'tar' command!\"";

				case 2:
					return "I'm not much for conversation, but I do love to help users " +
							"discover what is wrong with their job! " +
							"Try copy and pasting a error message you're receiving " +
							"into the text box!";
			}
		}
		return "";
	}
}
